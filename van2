
create new tty and select another tty
sudo chvt 2

see who is looged in, check other tty
who OR w

good options for man
man -a passwd
man 5 passwd
man man
man 5 intro
man -k OR apropos   (sudo mandb)
man -k user | grep 8    (it will list many option one of them it will be useradd)

vim tutor

merge command to one terminal. close and open the terminal again
history -w

echo '$PATH' OR  echo /$PATH
$PATH
echo "$PATH"
/home/user:...

findmnt   mounted
lsblk     not mounted

grep -Rl root *
grep 'ola$' file.txt   #bola, mola
grep 'b.*t' file.txt   # bet, bot , boot
egrep 'b.+t' file.txt   # bet, bot , boot
egrep 'b.?t' file.txt   # bet, bot 
grep 'b\{3\}t file.txt   #booot
grep '^...$' file.txt     #3 characteres
grep 'root\b' /          #specific this word

to activate the root user set a password when installing the RHEL9
root login ssh by default is disabled

su                #is good to test accounts when you assign permissions
su -              #open root shell
sudo -i           #better option to open root shell
su - <username>   #when you have priv you can access acc without write the password
/etc/sudoers      #it is better to edit visudo (here does some checks to see everything is ok) or create drop-in file in /etc/sudoers.d (this wont be over written)

Defaults timestamp_type=global,timestamp_timeout=60   #increase time to type the sudo password

sudo vim /etc/sudoers.d/<username>
linda ALL=/usr/sbin/useradd, /usr/bin/passwd, ! /usr/bin/passwd root


by default RHEL server run sshd, ssh has access throught the firewall. But root access are denied using ssh


/etc/login.defs
/etc/skel/<create-the-file-for-the-users-when-created>

expiry date Y-M-D
chage

permissions 
            READ		WRITE			      EXECUTE
file        open		modify			      run
directory   list		create/delete		      cd

specific user for umask
 ~/.bashrc
 
 the default umask for all users
 /etc/bashrc 
 change the first umask in the shell script
 
 the default umask for root
 can be set in /etc/login.defs
 
 
RHEL9 slaac support (ipv6) 
radvd  #need to be installed

/etc/hosts
/etc/resolv.conf
/etc/nsswitch.conf

/etc/NetworkManager/system-connection      #configuration is stored
sudo yum -y install NetworkManager
systemctl enable NetworkManager --now

good to use nmtui in the exam rather than nmcli
make sure to check automatically connect and available to all users
make sure to deactivated and active again
add the ip and hostname to /etc/hosts

rpm -qa show all packages currently installed
rpm -qf /bin/ls

better to use DNF

dnf repolist           #check the repo list available
dnf provides */mkfs.vfat
rpm -qp --scripts httpd-...        # search for packages /etc/yum.repos.d/AppStream/Packages
dnf search all seinfo
dnf updatte kernel - update the old kernel and keep the old kernel as a backup

subscription-manager register     (you need be online)
user: <email_registered_in_redhatDeveloper>
subscription-manager attach     #to be registered


killall <type-process-name>

loginctl list-users
loginctl list-session
loginctl terminate-session

nice -n 10 sleep 6000 &

pkill -u <username>

systemctl list-units -t timer
systemctl list-unit-files
systemctl list-dependencies sshd
systemctl edit httpd        #[Service] Restart=always RestartSec=60s

systemctl enable atd --now

journalctl -p err
journalctl -u sshd.service    #shows messages for sshd only

 #making journal persistent
 create directory /var/log/journal
/etc/systemd/journal.conf
            #Storage=auto                       #make sure there is this option
 systemctl restart systemd-journald    OR journalctl --flush
            
Configuring rsyslogd
this is another loggin srvice on redhat
/etc/rsyslog.conf
systemctl enable rsyslogd


vim /etc/rsyslog.conf     #create an entry in rsyslog that writes all messages with severity of error 
*.err   /var/log/error
systemctl restart rsyslog.service
logger -p err hello     #to check cat /var/log/error
vi /etc/logrotate.conf              # rotated on a monthly basis


XFS is the default filesystem
fast and scalable
size can be increase, not decreased

EXT4 
size can be increased and decreased

VFAT offers multi-OS support
used for shared devices (like thumb drivers)

blkid - shows all devices with their naming attributes
mkfs.* -L    is used to set a label while creating fs
xfs_admin -L
tune2fs -L   (ext)

/etc/fstab    #this is for swap
/dev/sda1   none swap defaults 0 0               #can be swap, but nowadays use none
swapon -a
free -m

mount
for temporary use /mnt
findmnt
extended partition cannot be mounted, only logical partition inside the extended partition can be mounted

vgextend
lvextend -r -L +1G    if dont use the -r neet do use other commands like resize2fs (ext) and xfs_growfs (xfs)

reducing volume groups 
1- use pvmove     #pvmove -v /dev/sdb2 /dev/sdb1
2- vgreduce       #vgreduce volume_group_name /dev/sdb2


stratis - next generationb volume managin filesystem that uses thin provisioning by default 
implemented in user space, which makes API access possible. Important for container and cloud environment

stratis pool need a minimal 4G
stratisd stratis-cli
systemctl enable stratisd --now
in /etc/fstab defaults, x-systemd.requires=stratisd.service 0 0    #you dont need to add defaults

stratis fs snapshot mypool myfs myfs-snapshot
mkdir /mount/myfs-snapshot
mount dev/stratis/mypool/myfs-snap /mount/myfs-snapshot


cp /etc/[acf]* /myfiles/


persistent changes 
/etc/default/grub
then compile the changes in grub.cfg
grub2-mkconfig -o /boot/grub2/grug.cfg                      MBR system
grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg             EFI system

To know if you are in a MBR or EEFI system
lsblk
if your boot disc only as a boot partition
in a EFI you will see a separete vfat partition that is mounted /boot/efi

grub
in the grub loader -> systemd.unit=multi-user.target
in the emergency it will be only read-only file system
mount -o remount,rw /
ls /boot
mount -a


grub-loader
init=/bin/bash
mount -o remount,rw /
passwd root
touch /.autorelabel
exec /usr/lib/systemd/systemd


## enable debug shell  --- not good for security perspective
systemctl enable --now debug-shell.service
ctrl + alt +F9

ssh-keygen
ssh-copy-id
ssh client persistent    /etc/ssh/ssh_config or ~/.ssh/ssh_config
ssh -X <IP> <gedit>

for server /etc/ssh/sshd_config
port 22
PermitRootLogin yes
PubkeyAuthentication    enable by default
PasswordAuthentication
X11Forwarding   yes        allow to forward graphical sessions
AllowUsers <username>
After changes do systemctl restart sshd

scp or sftp
put /myfile
get /yourfile
exit to close an sftp session

rsync is using ssh to synchronize files
rsync -a * <IP>:/home/username

enforcing=0 permissive
enforcing=1 enforcing
selinux=1 enabled SELinux

restorecon or touch /.autorelabel

install selinux man pages
dnf -y install selinux-policy-doc

man httpd_selinux   #can check some setsebool commands

troubleshooting SELinux
put in permissive (setenforce permissive OR setenforce 0) 
grep AVC /var/log/audit/audit.log | grep ssh
-a or -m (-m in case says already that context is already assign)

semanage boolean -l -C   #check everything that has changed, show all the booleans have a non-default setting

sealert with UUID message to advice on how to troubleshoot specific issues
journalctl | grep sealert
then get
sealert -l 87346054838572334987 | less
then you see some suggestions, leave the window and type what they suggested.
instead use touch /.autorelabel it is better restorecon -Rv /

to check if it is the selinux issue put  setenforce to permissive and try again if persist it is not/only the selinux problem it is something else
try
grep AVC /var/log/audit/audit.log
journalctl | grep sealert    (dnf provides */sealert)    (dnf -y install setroubles* - then reboot)

monitoring network sockets SS
a network socket is a connection endpoint, consisting of an IP addres followed by a port
ss -tu (tcp and udp)
ss -tln (shows TCP taht are in listening state only)
ss -tulpn 

dnf -y install firewalld
systemctl enable firewalld --now
firewall-cmd --add-service http --permanent
firewall-cmd --reload
firewall-cmd --list-all
firewall-cmd --get-services   #show all the services configured in firewalld

after installation, a file anaconda-ks.cfg is created and saved in the root home directory. You can edit, once after editing
run the command ksvalidator /root/anaconda-ks.cfg to verify file syntax


hwclock --hctosys

chronyd
pool 2.rhel.pool.ntp.org iburst        - sserver
server myserver.example.com iburst     - configure single ntp time source
iburst                                 - permit fast sync
chronyc sources


NFS client
dnf -y install nfs-utils
showmount -e <nfsserver_or_IP>

automount  - common used for home directories
dnf -y install autofs
/etc/auto.master    #add a line   /share  /etc/auto.share
/etc/auto.share     #add a line   files -rw nfshare:/share
systemctl enable autofs --now

/etc/auto.master    #add a line   /homes  /etc/auto.homes
/etc/auto.homes     #add a line   * -rw nfshare:/home/ldap/*
systemctl restart autofs --now

images optimized for use in RedHat environment use quay.io
podman login registry.redhat.io   use developer credentials to login to a registry
registry access is configured in /etc/containers/registries.conf
dnf install container-tools
podman info    #can checkk many info one of them is the registries by default
podman login registry.access.redhat.com
podman build -t namefortheimage .
podman images    #verify the image built

podman logs <container_ID>

to pass variables use
-e KEY=VALUE
use skopeo
skopeo inspect docker://quay.io/... THEN look at the USAGE (it will show about howwe should be using it)

rootless containers can only map to non-privileged port (higheer than 1024)
podman port -a
firewall-cmd --add-port=8080/tcp --permanent

bind-mounting
it is important the file ownership
rootless the uid need to match in the container as well, can use podman inspect on the image for check the user

root user
podman unshare run commands inside the container namespace
to get uid mapping use podman unshare cat /proc/self/uid_map

non-root user
find th uid
            podman inspect imagename
            podman exec containername grep username /etc/passwd   (podman exec mydb grep mysql /etc/passwd) output it will be mysql:x:27:27:MySQL SEerver...
podman unshare chown nn:nn directoryname     (mkdir mydb, then podman unshare chown 27:27 mydb)       

loginctl enable-linger <username>   #need root priv.
mkdir ~/.config/systemd/user
cd ~/.config/systemd/user
podman generate systemd --name myweb --files --new          # --new it will delete the stopped container and generate a new container
edit the file ~/.config/systemd/user
            WantedBy=default.target
systemctl --user daemon-reload                  #--user need a ssh session to work
systemctl --user enable myweb.service           #requires linger
ps faux | less

mkdir /etc/systemd/system  #for root

sudo dnf provides */Containerfile
sudo dnf install buildah-test
sudo find / -name "Containerfile" -exec ls -l {} \;


============================================= exec =======================================

.bash_profile
export color=red
export HIST_FILE_SIZE=2500
alias dir='ls -ltr'
Then to apply changes
source .bash_profile


cd /etc/yum.repos.d/repo/AppStream/Packages
ls http*
rpm -qp --script httpd...


systemctl edit httpd
[Service]
Restart=always
RestartSec=5s
